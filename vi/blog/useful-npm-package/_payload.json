[{"data":1,"prerenderedAt":1846},["ShallowReactive",2],{"blog-useful-npm-package":3,"search":90,"related-posts-useful-npm-package":348,"all-post":672},{"id":4,"title":5,"body":6,"date":77,"description":78,"extension":79,"image":80,"keywords":81,"meta":82,"navigation":83,"path":84,"published":83,"seo":85,"stem":86,"tags":87,"__hash__":89},"blog/blog/useful-npm-package.md","Tổng hợp các npm package hữu ích cho Frontend và Backend",{"type":7,"value":8,"toc":73},"minimal",[9,14,51,55,60,64],[10,11,13],"h1",{"id":12},"frontend","Frontend",[15,16,17,33,39,45],"ul",{},[18,19,20,24,25,32],"li",{},[21,22,23],"code",{},"react-query"," - ",[26,27,31],"a",{"href":28,"rel":29},"https://react-query.tanstack.com/",[30],"nofollow","React Query"," Thư viện quản lý trạng thái cho React, giúp xử lý các yêu cầu API và cache dữ liệu một cách dễ dàng.",[18,34,35,38],{},[21,36,37],{},"@progress/kendo-react-pdf"," - Thư viện tạo PDF cho React, hay hơn các thư viện khác ở chỗ hình ảnh sẽ được xuất ra dưới định dạng SVG, giúp cho việc xuất ảnh chất lượng cao và nét hơn, không bị vỡ ảnh khi zoom in.",[18,40,41,44],{},[21,42,43],{},"react-split-pane"," - Thư viện tạo giao diện chia tách (split view) cho React, giúp dễ dàng tạo các layout với các phần tử có thể kéo và thả.",[18,46,47,50],{},[21,48,49],{},"react-window"," - Thư viện giúp tối ưu hóa hiệu suất cho bảng và danh sách lớn trong React bằng cách chỉ render các phần tử đang hiển thị trên UI nhẹ và dễ sử dụng.",[10,52,54],{"id":53},"backend","Backend",[15,56,57],{},[18,58,59],{},"Updating...",[10,61,63],{"id":62},"các-đoạn-code-mẫu-hữu-dụng","Các đoạn code mẫu hữu dụng",[15,65,66],{},[18,67,68,69],{},"Code template cho custom send and listen event document",[70,71],"code-block",{":files":72},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"export const sendEvent = (eventName, detail) => {\\n  document.dispatchEvent(new CustomEvent(eventName, { detail }));\\n}\\nexport const listenEvent = (eventName, callback, context = document) => {\\n  context.addEventListener(eventName, callback);\\n  return () => context.removeEventListener(eventName, callback);\\n}\\n\"}]",{"title":74,"searchDepth":75,"depth":75,"links":76},"",2,[],"2025-05-05T00:00:00.000Z","Danh sách các npm package hữu ích cho lập trình Frontend và Backend, được tổng hợp từ kinh nghiệm thực tế và các chia sẻ trong cộng đồng.","md","/images/blog/useful-npm-package/banner.webp","npm, package, frontend, backend",{},true,"/blog/useful-npm-package",{"title":5,"description":78},"blog/useful-npm-package",[88],"npm","3WcFSlvMJI3UivaSkcCnPhkOghwUynB93HX-3qAii7M",[91,97,102,107,112,117,122,127,132,137,142,147,152,157,162,167,172,177,182,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,338,342,345],{"id":92,"title":93,"titles":94,"content":95,"level":96},"/blog/ansible","Tổng quan và cấu hình Ansible",[],"Hướng dẫn chi tiết về cài đặt, cấu hình SSH, inventory và sử dụng Playbook trong Ansible. Hướng dẫn chi tiết về cài đặt và triển khai Ansible Ansible là một công cụ tự động hóa mạnh mẽ, giúp quản lý cấu hình, triển khai ứng dụng và điều phối hệ thống một cách dễ dàng. Trong bài viết này, chúng ta sẽ tìm hiểu cách cài đặt, cấu hình và sử dụng Ansible thông qua các ví dụ thực tế.",1,{"id":98,"title":99,"titles":100,"content":101,"level":96},"/blog/ansible#️-cài-đặt-ansible","🛠️ Cài đặt Ansible",[],"Hướng dẫn cài đặt Ansible trên Ubuntu: Sau khi cài đặt, bạn có thể kiểm tra phiên bản Ansible:",{"id":103,"title":104,"titles":105,"content":106,"level":96},"/blog/ansible#cấu-hình-ssh","🔑 Cấu hình SSH",[],"Để Ansible có thể kết nối đến các máy chủ từ xa, bạn cần cấu hình SSH. Dưới đây là cách sao chép SSH key đến máy chủ khác: Lưu ý: Thay vinhtieng@123.3123.12 bằng tên người dùng và địa chỉ IP của máy chủ từ xa.",{"id":108,"title":109,"titles":110,"content":111,"level":96},"/blog/ansible#hosts-inventory","📋 Hosts - Inventory",[],"File inventory là nơi bạn định nghĩa danh sách các máy chủ mà Ansible sẽ quản lý. Đây là một ví dụ cơ bản:",{"id":113,"title":114,"titles":115,"content":116,"level":96},"/blog/ansible#kiểm-tra-kết-nối-ping","🏓 Kiểm tra kết nối (Ping)",[],"Bạn có thể kiểm tra kết nối đến các máy chủ bằng lệnh ping: Ping với file hosts mặc định: Ping với file inventory tùy chỉnh:",{"id":118,"title":119,"titles":120,"content":121,"level":96},"/blog/ansible#playbook-task-module","📜 Playbook - Task - Module",[],"Playbook là nơi bạn định nghĩa các tác vụ (tasks) cần thực hiện trên các máy chủ. Dưới đây là cách chạy một playbook: Ví dụ về Playbook đơn giản:",{"id":123,"title":124,"titles":125,"content":126,"level":96},"/blog/ansible#tài-liệu-tham-khảo","📚 Tài liệu tham khảo",[],"Ansible DocumentationAnsible GalaxyAnsible Playbook Guide Tóm lại: Ansible là công cụ mạnh mẽ giúp tự động hóa các tác vụ quản trị hệ thống. Việc nắm vững cách sử dụng Ansible sẽ giúp bạn tiết kiệm thời gian và giảm thiểu lỗi trong quá trình quản lý hệ thống.",{"id":128,"title":129,"titles":130,"content":131,"level":96},"/blog/basic-nginx","Tổng quan và cấu hình thông dụng Nginx",[],"Hướng dẫn chi tiết về cấu hình mặc định, PHP-FPM và thiết lập Load Balancer với Nginx. Hướng dẫn chi tiết về cấu hình và triển khai Nginx Nginx là một web server mã nguồn mở mạnh mẽ, được sử dụng phổ biến để phục vụ nội dung tĩnh, reverse proxy, cân bằng tải, bảo mật và hỗ trợ PHP thông qua FastCGI. Trong bài viết này, chúng ta sẽ đi qua các cấu hình từ cơ bản đến nâng cao, bao gồm: Cách cài đặt NginxCấu hình máy chủ mặc định (default host)Tích hợp với PHP-FPMThiết lập Load Balancer (cân bằng tải)Gzip, HTTP/2, Rate limitingRedirect, RewritesHardening & SecurityLogging nâng cao",{"id":133,"title":134,"titles":135,"content":136,"level":96},"/blog/basic-nginx#️-cài-đặt-nginx","🛠️ Cài đặt Nginx",[],"Hướng dẫn cài đặt Nginx trên Ubuntu: Sau khi cài đặt, bạn có thể kiểm tra trạng thái Nginx: Kiểm tra tường lửa: Sau khi cài đặt Nginx, bạn nên đảm bảo rằng tường lửa (firewall) cho phép lưu lượng HTTP và HTTPS để máy chủ có thể phục vụ nội dung web. Lệnh sudo ufw allow 'Nginx Full' sẽ mở cả hai cổng 80 (HTTP) và 443 (HTTPS).\nSau đó, dùng sudo ufw status để xác nhận rằng các cổng này đã được mở. Nếu bạn chưa bật ufw (Uncomplicated Firewall), bạn có thể bật bằng lệnh sudo ufw enable. Tuy nhiên, hãy đảm bảo cấu hình chính xác để không bị khóa SSH. Kiểm tra hoạt động của Nginx: Mở trình duyệt và truy cập địa chỉ:\n👉 http://\u003Cđịa_chỉ_IP_của_bạn> hoặc http://localhost nếu kiểm tra cục bộ. Bạn sẽ thấy trang mặc định “Welcome to nginx!” nếu mọi thứ hoạt động đúng cách.",{"id":138,"title":139,"titles":140,"content":141,"level":96},"/blog/basic-nginx#️-cấu-hình-default-host-trong-nginx","⚙️ Cấu hình Default Host trong Nginx",[],"Trên Ubuntu, file cấu hình của Nginx thường được lưu tại các vị trí sau: /etc/nginx/sites-available/default (Nếu sử dụng thư mục sites-available và sites-enabled)./etc/nginx/conf.d/default.conf (Thông dụng cho các cấu hình đơn giản). Mặc định, khi cài đặt Nginx, sẽ có một file cấu hình default trong thư mục /etc/nginx/sites-available/ với một số cấu hình cơ bản. Bạn có thể sửa file này để cấu hình server block cho website của mình. Cấu hình Default Host Mở file cấu hình Nginx mặc định: Mặc định, Nginx sẽ chọn block đầu tiên khi không tìm thấy server_name tương ứng. Để cấu hình rõ ràng host mặc định, bạn thêm default_server vào dòng listen: Ghi chú: listen 80 default_server;: Cấu hình Nginx lắng nghe cổng 80 (HTTP) và đánh dấu đây là default_server (server mặc định cho các yêu cầu không khớp với server block khác).root /var/www/html;: Đường dẫn tới thư mục chứa các tệp tin của website. Bạn có thể thay đổi đường dẫn này thành thư mục của website bạn muốn phục vụ.server_name _;: Chỉ thị này cho phép server chấp nhận tất cả các yêu cầu không khớp với server block khác. Nếu bạn có tên miền cụ thể, hãy thay thế dấu gạch dưới (_) bằng tên miền của bạn.location /: Đây là phần cấu hình định tuyến cho các yêu cầu đến. Cấu hình này giúp Nginx tìm kiếm các tệp tin khi người dùng truy cập vào website.try_files $uri $uri/ =404;: Nếu yêu cầu không trùng khớp với tệp tin hoặc thư mục, sẽ trả về lỗi 404. Sau khi chỉnh sửa xong, bạn cần kiểm tra xem cấu hình có chính xác không: Nếu không có lỗi nào, bạn có thể khởi động lại Nginx để áp dụng cấu hình mới: Giới thiệu về sites-available và sites-enabled Trong Nginx, thư mục sites-available và sites-enabled là một cơ chế để quản lý các website (virtual hosts) mà Nginx có thể phục vụ. Cấu trúc này giúp dễ dàng bật/tắt các website mà không cần phải xóa hoặc thay đổi cấu hình trực tiếp. sites-available: Đây là nơi bạn tạo và lưu trữ tất cả các file cấu hình của các website hoặc ứng dụng mà bạn muốn Nginx phục vụ.Mỗi file cấu hình trong sites-available đại diện cho một website hoặc ứng dụng riêng biệt.Ví dụ: /etc/nginx/sites-available/example.com là cấu hình cho website example.com. sites-enabled: Đây là nơi chứa các liên kết tượng trưng (symlink) đến các file cấu hình trong sites-available mà bạn muốn Nginx thực thi.Các liên kết này cho phép Nginx biết được website nào sẽ được kích hoạt.Bạn không nên trực tiếp chỉnh sửa các file trong sites-enabled. Thay vào đó, bạn tạo symlink từ sites-available. Cách thức hoạt động: Khi bạn tạo một file cấu hình trong sites-available, bạn có thể kích hoạt nó bằng cách tạo một symlink đến file đó trong thư mục sites-enabled.Để tạo symlink, sử dụng lệnh ln -s. Ví dụ, nếu bạn có cấu hình example.com trong sites-available, bạn có thể tạo symlink vào sites-enabled như sau:",{"id":143,"title":144,"titles":145,"content":146,"level":96},"/blog/basic-nginx#cấu-hình-nginx-với-php-fpm","🐘 Cấu hình Nginx với PHP-FPM",[],"Để xử lý các file PHP, bạn cần kết nối Nginx với PHP-FPM qua socket hoặc TCP: Lưu ý: Đường dẫn socket có thể thay đổi tùy phiên bản PHP.Nếu dùng TCP:",{"id":148,"title":149,"titles":150,"content":151,"level":96},"/blog/basic-nginx#load-balancer-trong-nginx","🌐 Load Balancer trong Nginx",[],"Nginx hỗ trợ cấu hình cân bằng tải với nhiều thuật toán lựa chọn backend: round-robin: Mặc định, phân phối đều cho các request.least_conn: Chọn server ít kết nối nhất.ip_hash: Duy trì session cho client.least_time: chọn server có thời gian phản hồi ít nhất Có thể thêm trọng số cho server bằng cách thêm số sau ip:port Ex: server 192.168.1.0:8000 weight=3; Cấu hình server block proxy đến upstream:",{"id":153,"title":154,"titles":155,"content":156,"level":96},"/blog/basic-nginx#gzip-compression","📦 Gzip Compression",[],"Bật gzip giúp tăng tốc độ tải trang bằng cách nén nội dung trả về:",{"id":158,"title":159,"titles":160,"content":161,"level":96},"/blog/basic-nginx#kích-hoạt-http2","⚡ Kích hoạt HTTP/2",[],"HTTP/2 cải thiện hiệu suất thông qua multiplexing và header compression:",{"id":163,"title":164,"titles":165,"content":166,"level":96},"/blog/basic-nginx#rate-limiting","🚦 Rate Limiting",[],"Giới hạn số lượng request để tránh DDoS và abuse:",{"id":168,"title":169,"titles":170,"content":171,"level":96},"/blog/basic-nginx#redirect-và-rewrites","🔁 Redirect và Rewrites",[],"Chuyển hướng toàn bộ traffic HTTP sang HTTPS: Viết lại URL cho SPA:",{"id":173,"title":174,"titles":175,"content":176,"level":96},"/blog/basic-nginx#hardening-security","🔐 Hardening & Security",[],"Bảo vệ server bằng cách từ chối truy cập file nhạy cảm: Ẩn thông tin server: Chống clickjacking và XSS:",{"id":178,"title":179,"titles":180,"content":181,"level":96},"/blog/basic-nginx#logging-nâng-cao","📊 Logging nâng cao",[],"Cấu hình custom log format để dễ debug:",{"id":183,"title":124,"titles":184,"content":185,"level":96},"/blog/basic-nginx#tài-liệu-tham-khảo",[],"Nginx DocumentationNginx Load Balancing GuideNginx + PHP-FPM SetupOWASP Nginx Hardening Guide Tóm lại: Nginx là công cụ cực kỳ mạnh mẽ và linh hoạt, không chỉ giới hạn ở web server mà còn là reverse proxy, caching layer, và load balancer. Việc nắm vững và khai thác tốt các tính năng sẽ giúp hệ thống của bạn hiệu suất cao, bảo mật và dễ mở rộng.",{"id":187,"title":188,"titles":189,"content":190,"level":96},"/blog/basic-redis","Cơ Bản Về Redis và Tích Hợp Với Node.js",[],"Tìm hiểu các khái niệm cơ bản về Redis bao gồm các kiểu dữ liệu và phương thức, cũng như cách tích hợp Redis vào ứng dụng Node.js để sử dụng bộ nhớ đệm và các tính năng thời gian thực. Cơ Bản Về Redis và Tích Hợp Với Node.js Redis là một kho dữ liệu key-value trong bộ nhớ, mã nguồn mở, nổi tiếng với hiệu suất và tính linh hoạt. Redis hỗ trợ nhiều kiểu dữ liệu, phù hợp cho việc sử dụng bộ nhớ đệm, ứng dụng thời gian thực, hệ thống pub/sub, và nhiều hơn nữa. Trong hướng dẫn này, chúng ta sẽ tìm hiểu: Các kiểu dữ liệu trong RedisCác lệnh phổ biến của RedisCách tích hợp Redis vào dự án Node.js",{"id":192,"title":193,"titles":194,"content":195,"level":96},"/blog/basic-redis#các-kiểu-dữ-liệu-lệnh-redis","📦 Các Kiểu Dữ Liệu & Lệnh Redis",[],"Redis hỗ trợ nhiều cấu trúc dữ liệu khác nhau:",{"id":197,"title":198,"titles":199,"content":200,"level":75},"/blog/basic-redis#_1-chuỗi-strings","1. Chuỗi (Strings)",[193],"Chuỗi là kiểu dữ liệu cơ bản nhất trong Redis. Bạn có thể lưu trữ bất kỳ giá trị nào dưới dạng chuỗi, bao gồm cả số nguyên và JSON được tuần tự hóa.",{"id":202,"title":203,"titles":204,"content":205,"level":75},"/blog/basic-redis#_2-danh-sách-lists","2. Danh sách (Lists)",[193],"Danh sách là các tập hợp có thứ tự của chuỗi. Bạn có thể thêm phần tử vào đầu hoặc cuối danh sách.",{"id":207,"title":208,"titles":209,"content":210,"level":75},"/blog/basic-redis#_3-tập-hợp-sets","3. Tập hợp (Sets)",[193],"Tập hợp là các tập hợp không có thứ tự của các chuỗi duy nhất. Chúng hỗ trợ các phép toán như hợp, giao, và hiệu.",{"id":212,"title":213,"titles":214,"content":215,"level":75},"/blog/basic-redis#_4-băm-hashes","4. Băm (Hashes)",[193],"Băm là các bản đồ giữa trường chuỗi và giá trị chuỗi, rất lý tưởng để biểu diễn các đối tượng.",{"id":217,"title":218,"titles":219,"content":220,"level":75},"/blog/basic-redis#_5-tập-hợp-có-thứ-tự-sorted-sets","5. Tập hợp có thứ tự (Sorted Sets)",[193],"Tập hợp có thứ tự tương tự như tập hợp nhưng có một điểm số liên kết với mỗi phần tử, cho phép truy xuất theo thứ tự.",{"id":222,"title":223,"titles":224,"content":225,"level":75},"/blog/basic-redis#_6-bitmaps-hyperloglogs-streams","6. Bitmaps, HyperLogLogs, Streams",[193],"Đây là các cấu trúc nâng cao hơn:\nBitmaps được sử dụng cho các thao tác cấp bit, cho phép bạn thao tác các bit riêng lẻ trong một chuỗi. HyperLogLogs được sử dụng để ước tính số lượng phần tử duy nhất trong một tập hợp, rất hữu ích cho các trường hợp như theo dõi số lượng khách truy cập duy nhất. Streams được thiết kế cho các đường dẫn dữ liệu thời gian thực và nguồn sự kiện, cho phép bạn thêm và truy vấn dữ liệu theo chuỗi thời gian.",{"id":227,"title":228,"titles":229,"content":230,"level":96},"/blog/basic-redis#tích-hợp-redis-với-nodejs","🔧 Tích Hợp Redis Với Node.js",[],"Bạn có thể sử dụng thư viện ioredis hoặc redis client phổ biến. Dưới đây là một ví dụ với ioredis.",{"id":232,"title":233,"titles":234,"content":235,"level":75},"/blog/basic-redis#_1-cài-đặt-redis-và-ioredis","1. Cài Đặt Redis và ioredis",[228],"Đảm bảo rằng bạn đã cài đặt và chạy Redis. Bạn có thể sử dụng Docker để chạy Redis một cách dễ dàng:",{"id":237,"title":238,"titles":239,"content":240,"level":75},"/blog/basic-redis#_2-thiết-lập-cơ-bản","2. Thiết Lập Cơ Bản",[228],"Tạo một tệp có tên redis.js và thêm đoạn mã sau:",{"id":242,"title":243,"titles":244,"content":245,"level":75},"/blog/basic-redis#_3-sử-dụng-redis-trong-ứng-dụng","3. Sử Dụng Redis Trong Ứng Dụng",[228],"Bây giờ bạn có thể sử dụng Redis trong ứng dụng của mình. Dưới đây là một ví dụ về việc thiết lập và lấy giá trị:",{"id":247,"title":248,"titles":249,"content":250,"level":75},"/blog/basic-redis#_4-ví-dụ-về-bộ-nhớ-đệm","4. Ví Dụ Về Bộ Nhớ Đệm",[228],"Bạn có thể sử dụng Redis làm bộ nhớ đệm để lưu trữ dữ liệu được truy cập thường xuyên. Dưới đây là một ví dụ về việc lưu trữ kết quả truy vấn cơ sở dữ liệu vào bộ nhớ đệm:",{"id":252,"title":253,"titles":254,"content":255,"level":75},"/blog/basic-redis#_5-kết-luận","5. Kết Luận",[228],"Redis là một công cụ mạnh mẽ cho bộ nhớ đệm và các ứng dụng thời gian thực. Bằng cách tích hợp Redis vào các dự án Node.js, bạn có thể cải thiện đáng kể hiệu suất và khả năng mở rộng. Hướng dẫn này đã bao quát các khái niệm cơ bản về kiểu dữ liệu, lệnh, và cách sử dụng Redis trong ứng dụng Node.js.\nHãy khám phá thêm các tính năng nâng cao như giao dịch, scripting Lua, và clustering khi bạn đã quen thuộc hơn với Redis.\nRedis là một công cụ đa năng có thể nâng cao đáng kể ứng dụng của bạn. Happy Coding",{"id":257,"title":258,"titles":259,"content":260,"level":75},"/blog/basic-redis#_6-tài-nguyên-tham-khảo","6. Tài Nguyên Tham Khảo",[228],"Tài liệu RedisTài liệu ioredis",{"id":262,"title":263,"titles":264,"content":265,"level":96},"/blog/common-docker-file","Các Dockerfile Phổ Biến Cho Nhiều Dự Án Khác Nhau",[],"Tìm hiểu về Docker và khám phá các Dockerfile phổ biến cho nhiều dự án như Node.js, PHP với Laravel, React, Vue, Nuxt và Next.js. Khám phá các kỹ thuật tối ưu và thực hành tốt nhất. Các Dockerfile Phổ Biến Cho Nhiều Dự Án Khác Nhau Docker là một công cụ ảo hóa nhẹ giúp phát triển, triển khai và chạy ứng dụng trong các container. Nó cho phép bạn đóng gói ứng dụng và tất cả các phụ thuộc của nó vào một container duy nhất, giúp dễ dàng triển khai trên bất kỳ môi trường nào mà không cần lo lắng về sự khác biệt giữa các môi trường. Đây là một số Dockerfile cho các dự án thường gặp, bạn có thể tham khảo và điều chỉnh theo nhu cầu của mình.",{"id":267,"title":268,"titles":269,"content":270,"level":75},"/blog/common-docker-file#_1-dockerfile-cho-nodejs","1. Dockerfile cho Node.js",[263],"Dockerfile cho Node.js rất quan trọng khi triển khai ứng dụng JavaScript phía server. Đây là một Dockerfile đã được tối ưu cho một dự án Node.js điển hình:",{"id":272,"title":273,"titles":274,"content":275,"level":75},"/blog/common-docker-file#_2-dockerfile-cho-php-với-laravel","2. Dockerfile cho PHP với Laravel",[263],"Laravel là một framework PHP phổ biến để xây dựng ứng dụng web. Dưới đây là Dockerfile cho một dự án Laravel:",{"id":277,"title":278,"titles":279,"content":280,"level":75},"/blog/common-docker-file#_3-dockerfile-cho-react","3. Dockerfile cho React",[263],"React thường được tạo bằng Create React App. Đây là Dockerfile cho dự án React:",{"id":282,"title":283,"titles":284,"content":285,"level":75},"/blog/common-docker-file#_4-dockerfile-cho-vue","4. Dockerfile cho Vue",[263],"Vue cũng được xây dựng tương tự như React. Dưới đây là Dockerfile cho Vue:",{"id":287,"title":288,"titles":289,"content":290,"level":75},"/blog/common-docker-file#_5-dockerfile-cho-nuxtjs","5. Dockerfile cho Nuxt.js",[263],"Nuxt.js là một framework mạnh mẽ để xây dựng ứng dụng Vue. Đây là Dockerfile cho dự án Nuxt:",{"id":292,"title":293,"titles":294,"content":295,"level":75},"/blog/common-docker-file#_6-dockerfile-cho-nextjs","6. Dockerfile cho Next.js",[263],"Next.js là một framework React phổ biến cho việc render phía server. Đây là Dockerfile cho dự án Next:",{"id":297,"title":298,"titles":299,"content":300,"level":75},"/blog/common-docker-file#đang-cập-nhật","Đang cập nhật...",[263],"Nếu bạn có các cấu hình hoặc Dockerfile khác muốn chia sẻ, vui lòng gửi email về vinhtieng123@gmail.com. Mình rất trân trọng điều đó.",{"id":302,"title":303,"titles":304,"content":305,"level":96},"/blog/jwt","JWT là gì? Cách hoạt động và ứng dụng thực tế",[],"JWT (JSON Web Token) là gì? Cách JWT hoạt động, cấu trúc gồm Header, Payload, Signature và cách ứng dụng trong xác thực bảo mật.",{"id":307,"title":308,"titles":309,"content":310,"level":96},"/blog/jwt#_1-giới-thiệu-về-jwt","1. Giới thiệu về JWT",[],"JSON Web Token (JWT) là một tiêu chuẩn mở ( RFC 7519 ) định nghĩa một cách thức nhỏ gọn và độc lập để truyền thông tin an toàn giữa các bên dưới dạng đối tượng JSON. Thông tin này có thể được xác minh và tin cậy vì nó được ký kỹ thuật số. JWT có thể được ký bằng một bí mật (với thuật toán HMAC ) hoặc một cặp khóa công khai/riêng tư bằng RSA hoặc ECDSA . Trích từ: https://jwt.io/introduction",{"id":312,"title":313,"titles":314,"content":315,"level":96},"/blog/jwt#_2-các-thành-phần-của-jwt","2. Các thành phần của JWT",[],"JWT bao gồm ba thành phần chính: Header, Payload và Signature. Mỗi phần đều được mã hóa bằng Base64Url và được phân tách bằng dấu chấm (.).\nMột JWT token thường sẽ trông như sau: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c như vậy với JWT token ở trên thì các thành phần sau khi được mã hóa sẽ là: Header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9Payload: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQSignature: SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c Chi tiết về các thành phần Header: Thường sẽ chứa thông tin về thuật toán mã hóa và loại token. Ví dụ: Payload: Đây là phần sẽ chứa các thông tin mà chúng ta muốn mã hóa và truyền tải. Thường thì chúng ta sẽ lưu thông tin người dùng, user_id,... Lưu ý rằng JWT token không có hết hạn, tuy nhiên chúng ta có thể giới hạn thời gian sống của token bằng cách thêm các trường như exp, nbf, iat vào payload. Và khi chúng ta xác thực token chúng ta sẽ cần thêm một bước kiểm tra thời gian sống của token. Như vậy chúng ta có thể sử dụng JWT token như một session token. Ví dụ về payload: Signature: Được tạo bằng cách mã hóa Header và Payload với một khóa bí mật và thuật toán đã chỉ định trong Header. Điều này giúp đảm bảo rằng token không bị thay đổi trong quá trình truyền tải. Ví dụ:",{"id":317,"title":318,"titles":319,"content":320,"level":96},"/blog/jwt#_3-viết-lại-hàm-để-generate-jwt-token-và-verify-jwt-token-trong-nodejs","3. Viết lại hàm để generate JWT token và verify JWT token trong NodeJs",[],"Khi làm việc với jwt và nodeJs, hầu hết mọi người sẽ sử dụng thư viện jsonwebtoken để tạo và xác thực JWT token. Tuy nhiên, để hiểu rõ hơn về cách hoạt động của JWT, chúng ta có thể tự viết hàm để tạo và xác thực JWT token. Giả sử chúng ta muốn tạo JWT token từ thông tin user_id=123, khi đó phần payload sẽ là: Ở phần header, chúng ta sẽ sử dụng thuật toán HS256 để mã hóa JWT token. Nên payload sẽ có dạng như sau: Để tạo JWT token, chúng ta cần mã hóa Header và Payload bằng Base64Url. Sau đó, chúng ta sẽ tạo chữ ký bằng cách sử dụng thuật toán HMACSHA256 với khóa bí mật (secret key) và kết hợp Header và Payload. Đầu tiên chúng ta cần viết 1 hàm để mã hóa Base64Url: Ở đây, vì chúng ta sử dụng NodeJs nên có thể sử dụng Buffer để mã hóa Base64Url. Nếu bạn đang làm việc với JavaScript trên trình duyệt, bạn có thể sử dụng btoa() để mã hóa Base64Url. Khi muốn giải mã, bạn có thể sử dụng atob(). Hàm này là hàm có sẵn trong trình duyệt. Tiếp theo, chúng ta sẽ triển khai hàm tạo JWT token. Trong Node.js, chúng ta có thể dễ dàng thực hiện điều này bằng cách dùng thư viện tích hợp sẵn là crypto, cụ thể là hàm createHmac. Hàm này sẽ giúp chúng ta tạo ra chữ ký (signature) từ chuỗi đã mã hóa gồm Header và Payload, kết hợp với secret key để đảm bảo tính toàn vẹn và xác thực của token. Full code mã hóa JWT token sẽ như sau: Như vậy chúng ta đã có hàm createJWT để tạo JWT token. Hàm này sẽ nhận vào 2 tham số là payload và secret. payload là thông tin mà chúng ta muốn mã hóa và truyền tải, còn secret là khóa bí mật mà chúng ta sẽ sử dụng để tạo chữ ký cho token. Đối với JWT token, chúng ta có thể sử dụng bất kỳ chuỗi nào làm khóa bí mật. Tuy nhiên, để đảm bảo tính bảo mật, chúng ta nên sử dụng một chuỗi ngẫu nhiên và đủ dài. Vì khi sử dụng thuật toán HMACSHA256, nếu kẻ tấn công biết được khóa bí mật, họ có thể tạo ra token giả mạo và truy cập vào hệ thống của bạn. Có thể sử dụng trang web randomkeygen.com để tạo ra một chuỗi ngẫu nhiên và đủ dài làm khóa bí mật.",{"id":322,"title":323,"titles":324,"content":325,"level":96},"/blog/jwt#_4-xác-thực-jwt-token","4. Xác thực JWT token",[],"Token JWT gồm ba phần: Header, Payload và Signature, được nối với nhau bằng dấu chấm (.). Quá trình xác thực diễn ra như sau: Tách token thành ba phần: Header, Payload và Signature.Tạo lại chữ ký bằng cách kết hợp Header và Payload đã mã hóa bằng Base64Url, sau đó sử dụng cùng thuật toán và khóa bí mật (secret key) đã được dùng khi tạo token ban đầu.So sánh chữ ký mới tạo với chữ ký ban đầu trong token:\nNếu hai chữ ký giống nhau, token được xác nhận là hợp lệ (không bị chỉnh sửa).Nếu khác nhau, token đã bị thay đổi hoặc không hợp lệ. Ngoài ra, để kiểm tra xem token có hết hạn hay chưa, bạn có thể thêm trường exp (expiration) vào Payload. Trường này lưu thời gian hết hạn dưới dạng timestamp (số giây kể từ ngày 1/1/1970). Khi xác thực, chỉ cần so sánh giá trị exp với thời gian hiện tại để biết token còn hiệu lực hay không.",{"id":327,"title":328,"titles":329,"content":330,"level":96},"/blog/jwt#_5-kết-luận","5. Kết luận",[],"JWT là một công cụ mạnh mẽ để xác thực và phân quyền trong các ứng dụng web. Bằng cách hiểu rõ cách hoạt động của JWT, bạn có thể tự tạo và xác thực JWT token mà không cần phụ thuộc vào thư viện bên ngoài. Tuy nhiên, trong thực tế, bạn nên sử dụng thư viện jsonwebtoken để tiết kiệm thời gian và công sức. Hy vọng bài viết này đã giúp bạn hiểu rõ hơn về JWT và cách sử dụng nó trong ứng dụng của mình. Nếu bạn có bất kỳ câu hỏi nào, hãy liên hệ với mình qua các kênh liên lạc như email, facebook, zalo hoặc telegram nhé!",{"id":332,"title":333,"titles":334,"content":335,"level":96},"/blog/jwt#_6-tài-liệu-tham-khảo","6. Tài liệu tham khảo",[],"jwt.ioRFC 7519 - JSON Web Token (JWT)jsonwebtoken",{"id":84,"title":5,"titles":337,"content":78,"level":96},[],{"id":339,"title":13,"titles":340,"content":341,"level":96},"/blog/useful-npm-package#frontend",[],"react-query - React Query Thư viện quản lý trạng thái cho React, giúp xử lý các yêu cầu API và cache dữ liệu một cách dễ dàng.@progress/kendo-react-pdf - Thư viện tạo PDF cho React, hay hơn các thư viện khác ở chỗ hình ảnh sẽ được xuất ra dưới định dạng SVG, giúp cho việc xuất ảnh chất lượng cao và nét hơn, không bị vỡ ảnh khi zoom in.react-split-pane - Thư viện tạo giao diện chia tách (split view) cho React, giúp dễ dàng tạo các layout với các phần tử có thể kéo và thả.react-window - Thư viện giúp tối ưu hóa hiệu suất cho bảng và danh sách lớn trong React bằng cách chỉ render các phần tử đang hiển thị trên UI nhẹ và dễ sử dụng.",{"id":343,"title":54,"titles":344,"content":59,"level":96},"/blog/useful-npm-package#backend",[],{"id":346,"title":63,"titles":347,"content":68,"level":96},"/blog/useful-npm-package#các-đoạn-code-mẫu-hữu-dụng",[],[349],{"id":350,"title":303,"body":351,"date":77,"description":305,"extension":79,"image":665,"keywords":666,"meta":667,"navigation":83,"path":302,"published":83,"seo":668,"stem":669,"tags":670,"__hash__":671},"blog/blog/jwt.md",{"type":7,"value":352,"toc":663},[353,356,360,370,373,388,395,398,418,421,427,434,437,440,447,462,465,468,483,486,493,496,499,502,505,518,521,524,539,550,553,556,576,582,591,594,597,617,620,623,626,629,635,638,641],[10,354,308],{"id":355},"_1-giới-thiệu-về-jwt",[357,358,359],"p",{},"JSON Web Token (JWT) là một tiêu chuẩn mở ( RFC 7519 ) định nghĩa một cách thức nhỏ gọn và độc lập để truyền thông tin an toàn giữa các bên dưới dạng đối tượng JSON. Thông tin này có thể được xác minh và tin cậy vì nó được ký kỹ thuật số. JWT có thể được ký bằng một bí mật (với thuật toán HMAC ) hoặc một cặp khóa công khai/riêng tư bằng RSA hoặc ECDSA .",[357,361,362],{},[363,364,365,366],"em",{},"Trích từ: ",[26,367,368],{"href":368,"rel":369},"https://jwt.io/introduction",[30],[10,371,313],{"id":372},"_2-các-thành-phần-của-jwt",[357,374,375,376,379,380,383,384,387],{},"JWT bao gồm ba thành phần chính: ",[21,377,378],{},"Header",", ",[21,381,382],{},"Payload"," và ",[21,385,386],{},"Signature",". Mỗi phần đều được mã hóa bằng Base64Url và được phân tách bằng dấu chấm (.).\nMột JWT token thường sẽ trông như sau:",[389,390,392],"alert",{"type":391},"info",[357,393,394],{},"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",[357,396,397],{},"như vậy với JWT token ở trên thì các thành phần sau khi được mã hóa sẽ là:",[15,399,400,406,412],{},[18,401,402,403],{},"Header: ",[21,404,405],{},"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",[18,407,408,409],{},"Payload: ",[21,410,411],{},"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",[18,413,414,415],{},"Signature: ",[21,416,417],{},"SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",[419,420],"br",{},[357,422,423],{},[424,425,426],"strong",{},"Chi tiết về các thành phần",[15,428,429],{},[18,430,431,433],{},[424,432,378],{},": Thường sẽ chứa thông tin về thuật toán mã hóa và loại token.",[357,435,436],{},"Ví dụ:",[70,438],{":files":439},"[{\"title\":\"json\",\"language\":\"json\",\"content\":\"{\\n  \\\"alg\\\": \\\"HS256\\\",\\n  \\\"typ\\\": \\\"JWT\\\"\\n}\\n\"}]",[15,441,442],{},[18,443,444,446],{},[424,445,382],{},": Đây là phần sẽ chứa các thông tin mà chúng ta muốn mã hóa và truyền tải. Thường thì chúng ta sẽ lưu thông tin người dùng, user_id,...",[389,448,449],{"type":391},[357,450,451,452,379,455,379,458,461],{},"Lưu ý rằng JWT token không có hết hạn, tuy nhiên chúng ta có thể giới hạn thời gian sống của token bằng cách thêm các trường như ",[21,453,454],{},"exp",[21,456,457],{},"nbf",[21,459,460],{},"iat"," vào payload. Và khi chúng ta xác thực token chúng ta sẽ cần thêm một bước kiểm tra thời gian sống của token. Như vậy chúng ta có thể sử dụng JWT token như một session token.",[357,463,464],{},"Ví dụ về payload:",[70,466],{":files":467},"[{\"title\":\"json\",\"language\":\"json\",\"content\":\"{\\n  \\\"sub\\\": \\\"1234567890\\\",\\n  \\\"name\\\": \\\"John Doe\\\",\\n  \\\"iat\\\": 1516239022\\n}\\n\"}]",[15,469,470],{},[18,471,472,474,475,383,477,479,480],{},[424,473,386],{},": Được tạo bằng cách mã hóa ",[21,476,378],{},[21,478,382],{}," với một khóa bí mật và thuật toán đã chỉ định trong Header. Điều này giúp đảm bảo rằng token không bị thay đổi trong quá trình truyền tải. Ví dụ:",[70,481],{":files":482},"[{\"title\":\"json\",\"language\":\"json\",\"content\":\"HMACSHA256(\\n  base64UrlEncode(header) + \\\".\\\" +\\n  base64UrlEncode(payload),\\n  your-256-bit-secret\\n)\\n\"}]",[10,484,318],{"id":485},"_3-viết-lại-hàm-để-generate-jwt-token-và-verify-jwt-token-trong-nodejs",[357,487,488,489,492],{},"Khi làm việc với jwt và nodeJs, hầu hết mọi người sẽ sử dụng thư viện ",[21,490,491],{},"jsonwebtoken"," để tạo và xác thực JWT token. Tuy nhiên, để hiểu rõ hơn về cách hoạt động của JWT, chúng ta có thể tự viết hàm để tạo và xác thực JWT token.",[357,494,495],{},"Giả sử chúng ta muốn tạo JWT token từ thông tin user_id=123, khi đó phần payload sẽ là:",[70,497],{":files":498},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"const payload = {\\n  user_id: 123\\n}\\n\"}]",[357,500,501],{},"Ở phần header, chúng ta sẽ sử dụng thuật toán HS256 để mã hóa JWT token. Nên payload sẽ có dạng như sau:",[70,503],{":files":504},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"const header = {\\n  alg: 'HS256',\\n  typ: 'JWT'\\n}\\n\"}]",[357,506,507,508,383,510,512,513,383,515,517],{},"Để tạo JWT token, chúng ta cần mã hóa ",[21,509,378],{},[21,511,382],{}," bằng Base64Url. Sau đó, chúng ta sẽ tạo chữ ký bằng cách sử dụng thuật toán HMACSHA256 với khóa bí mật (secret key) và kết hợp ",[21,514,378],{},[21,516,382],{},".",[357,519,520],{},"Đầu tiên chúng ta cần viết 1 hàm để mã hóa Base64Url:",[70,522],{":files":523},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"function base64UrlEncode(str) {\\n  return Buffer.from(str)\\n    .toString('base64')\\n    .replace(/=/g, '')\\n    .replace(/\\\\+/g, '-')\\n    .replace(/\\\\//g, '_');\\n}\\n\"}]",[357,525,526,527,530,531,534,535,538],{},"Ở đây, vì chúng ta sử dụng NodeJs nên có thể sử dụng ",[21,528,529],{},"Buffer"," để mã hóa Base64Url. Nếu bạn đang làm việc với JavaScript trên trình duyệt, bạn có thể sử dụng ",[21,532,533],{},"btoa()"," để mã hóa Base64Url. Khi muốn giải mã, bạn có thể sử dụng ",[21,536,537],{},"atob()",". Hàm này là hàm có sẵn trong trình duyệt.",[357,540,541,542,545,546,549],{},"Tiếp theo, chúng ta sẽ triển khai hàm tạo JWT token. Trong Node.js, chúng ta có thể dễ dàng thực hiện điều này bằng cách dùng thư viện tích hợp sẵn là ",[21,543,544],{},"crypto",", cụ thể là hàm ",[21,547,548],{},"createHmac",". Hàm này sẽ giúp chúng ta tạo ra chữ ký (signature) từ chuỗi đã mã hóa gồm Header và Payload, kết hợp với secret key để đảm bảo tính toàn vẹn và xác thực của token.",[357,551,552],{},"Full code mã hóa JWT token sẽ như sau:",[70,554],{":files":555},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"const crypto = require('crypto');\\nfunction base64UrlEncode(str) {\\n  return Buffer.from(str)\\n    .toString('base64')\\n    .replace(/=/g, '')\\n    .replace(/\\\\+/g, '-')\\n    .replace(/\\\\//g, '_');\\n}\\n\\nfunction createJWT(payload, secret) {\\n  const header = {\\n    alg: 'HS256',\\n    typ: 'JWT'\\n  };\\n\\n  const encodedHeader = base64UrlEncode(JSON.stringify(header));\\n  const encodedPayload = base64UrlEncode(JSON.stringify(payload));\\n\\n  const signature = crypto\\n    .createHmac('sha256', secret)\\n    .update(`${encodedHeader}.${encodedPayload}`)\\n    .digest('base64')\\n    .replace(/=/g, '')\\n    .replace(/\\\\+/g, '-')\\n    .replace(/\\\\//g, '_');\\n\\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\\n}\\n\"}]",[357,557,558,559,562,563,383,566,569,570,572,573,575],{},"Như vậy chúng ta đã có hàm ",[21,560,561],{},"createJWT"," để tạo JWT token. Hàm này sẽ nhận vào 2 tham số là ",[21,564,565],{},"payload",[21,567,568],{},"secret",". ",[21,571,565],{}," là thông tin mà chúng ta muốn mã hóa và truyền tải, còn ",[21,574,568],{}," là khóa bí mật mà chúng ta sẽ sử dụng để tạo chữ ký cho token.",[389,577,579],{"type":578},"error",[357,580,581],{},"Đối với JWT token, chúng ta có thể sử dụng bất kỳ chuỗi nào làm khóa bí mật. Tuy nhiên, để đảm bảo tính bảo mật, chúng ta nên sử dụng một chuỗi ngẫu nhiên và đủ dài. Vì khi sử dụng thuật toán HMACSHA256, nếu kẻ tấn công biết được khóa bí mật, họ có thể tạo ra token giả mạo và truy cập vào hệ thống của bạn.",[357,583,584,585,590],{},"Có thể sử dụng trang web ",[26,586,589],{"href":587,"rel":588},"https://randomkeygen.com/",[30],"randomkeygen.com"," để tạo ra một chuỗi ngẫu nhiên và đủ dài làm khóa bí mật.",[10,592,323],{"id":593},"_4-xác-thực-jwt-token",[357,595,596],{},"Token JWT gồm ba phần: Header, Payload và Signature, được nối với nhau bằng dấu chấm (.). Quá trình xác thực diễn ra như sau:",[598,599,600,603,606],"ol",{},[18,601,602],{},"Tách token thành ba phần: Header, Payload và Signature.",[18,604,605],{},"Tạo lại chữ ký bằng cách kết hợp Header và Payload đã mã hóa bằng Base64Url, sau đó sử dụng cùng thuật toán và khóa bí mật (secret key) đã được dùng khi tạo token ban đầu.",[18,607,608,609],{},"So sánh chữ ký mới tạo với chữ ký ban đầu trong token:\n",[15,610,611,614],{},[18,612,613],{},"Nếu hai chữ ký giống nhau, token được xác nhận là hợp lệ (không bị chỉnh sửa).",[18,615,616],{},"Nếu khác nhau, token đã bị thay đổi hoặc không hợp lệ.",[70,618],{":files":619},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"function verifyJWT(token, secret) {\\n  const [encodedHeader, encodedPayload, signature] = token.split('.');\\n  const expectedSignature = crypto\\n    .createHmac('sha256', secret)\\n    .update(`${encodedHeader}.${encodedPayload}`)\\n    .digest('base64')\\n    .replace(/=/g, '')\\n    .replace(/\\\\+/g, '-')\\n    .replace(/\\\\//g, '_');\\n\\n  return expectedSignature === signature;\\n}\\nconst token = createJWT(payload, secret);\\nconst isValid = verifyJWT(token, secret);\\nconsole.log('Token is valid:', isValid);\\n\"}]",[357,621,622],{},"Ngoài ra, để kiểm tra xem token có hết hạn hay chưa, bạn có thể thêm trường exp (expiration) vào Payload. Trường này lưu thời gian hết hạn dưới dạng timestamp (số giây kể từ ngày 1/1/1970). Khi xác thực, chỉ cần so sánh giá trị exp với thời gian hiện tại để biết token còn hiệu lực hay không.",[70,624],{":files":625},"[{\"title\":\"javascript\",\"language\":\"javascript\",\"content\":\"const payload = {\\n  user_id: 123,\\n  exp: Math.floor(Date.now() / 1000) + (60 * 60) // Hết hạn sau 1 giờ\\n};\\nconst token = createJWT(payload, secret);\\nconst isValid = verifyJWT(token, secret);\\nconst decodedPayload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());\\nconst isExpired = decodedPayload.exp \u003C Math.floor(Date.now() / 1000);\\nconsole.log('Token is valid:', isValid);\\nconsole.log('Token is expired:', isExpired);\\n\"}]",[10,627,328],{"id":628},"_5-kết-luận",[357,630,631,632,634],{},"JWT là một công cụ mạnh mẽ để xác thực và phân quyền trong các ứng dụng web. Bằng cách hiểu rõ cách hoạt động của JWT, bạn có thể tự tạo và xác thực JWT token mà không cần phụ thuộc vào thư viện bên ngoài. Tuy nhiên, trong thực tế, bạn nên sử dụng thư viện ",[21,633,491],{}," để tiết kiệm thời gian và công sức.",[357,636,637],{},"Hy vọng bài viết này đã giúp bạn hiểu rõ hơn về JWT và cách sử dụng nó trong ứng dụng của mình. Nếu bạn có bất kỳ câu hỏi nào, hãy liên hệ với mình qua các kênh liên lạc như email, facebook, zalo hoặc telegram nhé!",[10,639,333],{"id":640},"_6-tài-liệu-tham-khảo",[15,642,643,650,657],{},[18,644,645],{},[26,646,649],{"href":647,"rel":648},"https://jwt.io/",[30],"jwt.io",[18,651,652],{},[26,653,656],{"href":654,"rel":655},"https://datatracker.ietf.org/doc/html/rfc7519",[30],"RFC 7519 - JSON Web Token (JWT)",[18,658,659],{},[26,660,491],{"href":661,"rel":662},"https://www.npmjs.com/package/jsonwebtoken",[30],{"title":74,"searchDepth":75,"depth":75,"links":664},[],"/images/blog/jwt/banner.webp","jwt, jsonwebtoken, nodejs, bảo mật, xác thực",{},{"title":303,"description":305},"blog/jwt",[88],"yD1lXH-8Az6ik7WFkgSdIc4k5xNC5W8to4G-L9vWpKw",[673,837,1302,1492,1586,1801],{"id":674,"title":93,"body":675,"date":827,"description":828,"extension":79,"image":829,"keywords":830,"meta":831,"navigation":83,"path":92,"published":83,"seo":832,"stem":833,"tags":834,"__hash__":836},"blog/blog/ansible.md",{"type":7,"value":676,"toc":825},[677,682,685,688,691,694,697,700,703,705,708,711,714,724,726,729,731,734,736,739,746,753,756,763,766,768,771,774,777,782,785,787,790,813,815,817,822],[357,678,679],{},[424,680,681],{},"Hướng dẫn chi tiết về cài đặt và triển khai Ansible",[357,683,684],{},"Ansible là một công cụ tự động hóa mạnh mẽ, giúp quản lý cấu hình, triển khai ứng dụng và điều phối hệ thống một cách dễ dàng. Trong bài viết này, chúng ta sẽ tìm hiểu cách cài đặt, cấu hình và sử dụng Ansible thông qua các ví dụ thực tế.",[686,687],"hr",{},[10,689,99],{"id":690},"️-cài-đặt-ansible",[357,692,693],{},"Hướng dẫn cài đặt Ansible trên Ubuntu:",[70,695],{":files":696},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"sudo apt update -y\\nsudo apt install software-properties-common -y\\nsudo apt-add-repository --yes --update ppa:ansible/ansible\\nsudo apt install ansible -y\\n\"}]",[357,698,699],{},"Sau khi cài đặt, bạn có thể kiểm tra phiên bản Ansible:",[70,701],{":files":702},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ansible --version\"}]",[686,704],{},[10,706,104],{"id":707},"cấu-hình-ssh",[357,709,710],{},"Để Ansible có thể kết nối đến các máy chủ từ xa, bạn cần cấu hình SSH. Dưới đây là cách sao chép SSH key đến máy chủ khác:",[70,712],{":files":713},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ssh-copy-id -i ~/.ssh/id_rsa.pub vinhtieng@123.3123.12\"}]",[357,715,716,719,720,723],{},[424,717,718],{},"Lưu ý:"," Thay ",[21,721,722],{},"vinhtieng@123.3123.12"," bằng tên người dùng và địa chỉ IP của máy chủ từ xa.",[686,725],{},[10,727,109],{"id":728},"hosts-inventory",[357,730,111],{},[70,732],{":files":733},"[{\"title\":\"inventory\",\"language\":\"ini\",\"content\":\"[webservers]\\nweb1.example.com\\nweb2.example.com\\n\\n[databases]\\ndb1.example.com\\n\\n[webservers:vars]\\nansible_user=your_ssh_user\\nansible_ssh_private_key_file=/path/to/private/key\\n\\n[webservers1]\\nweb1.example.com ansible_user=user1 ansible_ssh_private_key_file=/path/to/key1\\nweb2.example.com ansible_user=user2 ansible_ssh_private_key_file=/path/to/key2\\n\"}]",[686,735],{},[10,737,114],{"id":738},"kiểm-tra-kết-nối-ping",[357,740,741,742,745],{},"Bạn có thể kiểm tra kết nối đến các máy chủ bằng lệnh ",[21,743,744],{},"ping",":",[598,747,748],{},[18,749,750],{},[424,751,752],{},"Ping với file hosts mặc định:",[70,754],{":files":755},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ansible -m ping all\"}]",[598,757,758],{"start":75},[18,759,760],{},[424,761,762],{},"Ping với file inventory tùy chỉnh:",[70,764],{":files":765},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ansible -i my_hosts all -m ping\"}]",[686,767],{},[10,769,119],{"id":770},"playbook-task-module",[357,772,773],{},"Playbook là nơi bạn định nghĩa các tác vụ (tasks) cần thực hiện trên các máy chủ. Dưới đây là cách chạy một playbook:",[70,775],{":files":776},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ansible-playbook my_playbook.yml -i inventory_file\"}]",[357,778,779],{},[424,780,781],{},"Ví dụ về Playbook đơn giản:",[70,783],{":files":784},"[{\"title\":\"my_playbook.yml\",\"language\":\"yaml\",\"content\":\"---\\n- name: Cài đặt và khởi động Apache\\n  hosts: webservers\\n  become: yes\\n  tasks:\\n    - name: Cài đặt Apache\\n      apt:\\n        name: apache2\\n        state: present\\n    - name: Đảm bảo Apache đang chạy\\n      service:\\n        name: apache2\\n        state: started\\n\"}]",[686,786],{},[10,788,124],{"id":789},"tài-liệu-tham-khảo",[15,791,792,799,806],{},[18,793,794],{},[26,795,798],{"href":796,"rel":797},"https://docs.ansible.com/",[30],"Ansible Documentation",[18,800,801],{},[26,802,805],{"href":803,"rel":804},"https://galaxy.ansible.com/",[30],"Ansible Galaxy",[18,807,808],{},[26,809,812],{"href":810,"rel":811},"https://docs.ansible.com/ansible/latest/user_guide/playbooks.html",[30],"Ansible Playbook Guide",[686,814],{},[419,816],{},[357,818,819],{},[424,820,821],{},"Tóm lại:",[357,823,824],{},"Ansible là công cụ mạnh mẽ giúp tự động hóa các tác vụ quản trị hệ thống. Việc nắm vững cách sử dụng Ansible sẽ giúp bạn tiết kiệm thời gian và giảm thiểu lỗi trong quá trình quản lý hệ thống.",{"title":74,"searchDepth":75,"depth":75,"links":826},[],"2025-04-25T00:00:00.000Z","Hướng dẫn chi tiết về cài đặt, cấu hình SSH, inventory và sử dụng Playbook trong Ansible.","/images/blog/ansible/banner.webp","ansible, automation, configuration management",{},{"title":93,"description":828},"blog/ansible",[835],"ansible","TDOKqPCKfBmvSL-G-wacqQdrgbcbAiBJrgMPYjtJtIc",{"id":838,"title":129,"body":839,"date":827,"description":1293,"extension":79,"image":1294,"keywords":1295,"meta":1296,"navigation":83,"path":128,"published":83,"seo":1297,"stem":1298,"tags":1299,"__hash__":1301},"blog/blog/basic-nginx.md",{"type":7,"value":840,"toc":1291},[841,846,849,875,877,880,883,886,889,892,897,900,903,906,912,915,926,929,932,935,949,952,957,960,963,977,980,985,1017,1020,1023,1026,1029,1032,1035,1042,1053,1060,1071,1074,1085,1088,1091,1094,1097,1100,1104,1112,1115,1117,1120,1123,1149,1152,1157,1160,1163,1166,1168,1171,1173,1176,1178,1181,1183,1186,1188,1191,1193,1196,1198,1201,1204,1207,1210,1213,1215,1218,1221,1224,1227,1230,1233,1236,1238,1241,1243,1246,1248,1250,1280,1282,1284,1288],[357,842,843],{},[424,844,845],{},"Hướng dẫn chi tiết về cấu hình và triển khai Nginx",[357,847,848],{},"Nginx là một web server mã nguồn mở mạnh mẽ, được sử dụng phổ biến để phục vụ nội dung tĩnh, reverse proxy, cân bằng tải, bảo mật và hỗ trợ PHP thông qua FastCGI. Trong bài viết này, chúng ta sẽ đi qua các cấu hình từ cơ bản đến nâng cao, bao gồm:",[15,850,851,854,857,860,863,866,869,872],{},[18,852,853],{},"Cách cài đặt Nginx",[18,855,856],{},"Cấu hình máy chủ mặc định (default host)",[18,858,859],{},"Tích hợp với PHP-FPM",[18,861,862],{},"Thiết lập Load Balancer (cân bằng tải)",[18,864,865],{},"Gzip, HTTP/2, Rate limiting",[18,867,868],{},"Redirect, Rewrites",[18,870,871],{},"Hardening & Security",[18,873,874],{},"Logging nâng cao",[686,876],{},[10,878,134],{"id":879},"️-cài-đặt-nginx",[357,881,882],{},"Hướng dẫn cài đặt Nginx trên Ubuntu:",[70,884],{":files":885},"[{\"title\":\"bash\",\"language\":\"nginx\",\"content\":\"sudo apt update\\nsudo apt install nginx\\n\"}]",[357,887,888],{},"Sau khi cài đặt, bạn có thể kiểm tra trạng thái Nginx:",[70,890],{":files":891},"[{\"title\":\"bash\",\"language\":\"nginx\",\"content\":\"sudo systemctl status nginx\"}]",[357,893,894],{},[424,895,896],{},"Kiểm tra tường lửa:",[357,898,899],{},"Sau khi cài đặt Nginx, bạn nên đảm bảo rằng tường lửa (firewall) cho phép lưu lượng HTTP và HTTPS để máy chủ có thể phục vụ nội dung web.",[70,901],{":files":902},"[{\"title\":\"bash\",\"language\":\"nginx\",\"content\":\"sudo ufw allow ‘Nginx Full’\\nsudo ufw status\\n\"}]",[357,904,905],{},"Lệnh sudo ufw allow 'Nginx Full' sẽ mở cả hai cổng 80 (HTTP) và 443 (HTTPS).\nSau đó, dùng sudo ufw status để xác nhận rằng các cổng này đã được mở.",[389,907,909],{"type":908},"warning",[357,910,911],{},"Nếu bạn chưa bật ufw (Uncomplicated Firewall), bạn có thể bật bằng lệnh sudo ufw enable. Tuy nhiên, hãy đảm bảo cấu hình chính xác để không bị khóa SSH.",[357,913,914],{},"Kiểm tra hoạt động của Nginx:",[357,916,917,918,921,922,925],{},"Mở trình duyệt và truy cập địa chỉ:\n👉 ",[21,919,920],{},"http://\u003Cđịa_chỉ_IP_của_bạn>"," hoặc ",[21,923,924],{},"http://localhost"," nếu kiểm tra cục bộ.",[357,927,928],{},"Bạn sẽ thấy trang mặc định “Welcome to nginx!” nếu mọi thứ hoạt động đúng cách.",[10,930,139],{"id":931},"️-cấu-hình-default-host-trong-nginx",[357,933,934],{},"Trên Ubuntu, file cấu hình của Nginx thường được lưu tại các vị trí sau:",[15,936,937,943],{},[18,938,939,942],{},[21,940,941],{},"/etc/nginx/sites-available/default"," (Nếu sử dụng thư mục sites-available và sites-enabled).",[18,944,945,948],{},[21,946,947],{},"/etc/nginx/conf.d/default.conf"," (Thông dụng cho các cấu hình đơn giản).",[357,950,951],{},"Mặc định, khi cài đặt Nginx, sẽ có một file cấu hình default trong thư mục /etc/nginx/sites-available/ với một số cấu hình cơ bản. Bạn có thể sửa file này để cấu hình server block cho website của mình.",[357,953,954],{},[424,955,956],{},"Cấu hình Default Host",[357,958,959],{},"Mở file cấu hình Nginx mặc định:",[70,961],{":files":962},"[{\"title\":\"default.conf\",\"language\":\"nginx\",\"content\":\"sudo nano /etc/nginx/sites-available/default\"}]",[357,964,965,966,969,970,973,974,745],{},"Mặc định, Nginx sẽ chọn block đầu tiên khi không tìm thấy ",[21,967,968],{},"server_name"," tương ứng. Để cấu hình rõ ràng host mặc định, bạn thêm ",[21,971,972],{},"default_server"," vào dòng ",[21,975,976],{},"listen",[70,978],{":files":979},"[{\"title\":\"default.conf\",\"language\":\"nginx\",\"content\":\"server {\\n    listen 80 default_server;\\n    server_name _;\\n    root /var/www/html;\\n    index index.html index.htm;\\n\\n    location / {\\n        try_files $uri $uri/ =404;\\n    }\\n}\\n\"}]",[357,981,982],{},[424,983,984],{},"Ghi chú:",[15,986,987,993,999,1005,1011],{},[18,988,989,992],{},[21,990,991],{},"listen 80 default_server;",": Cấu hình Nginx lắng nghe cổng 80 (HTTP) và đánh dấu đây là default_server (server mặc định cho các yêu cầu không khớp với server block khác).",[18,994,995,998],{},[21,996,997],{},"root /var/www/html;",": Đường dẫn tới thư mục chứa các tệp tin của website. Bạn có thể thay đổi đường dẫn này thành thư mục của website bạn muốn phục vụ.",[18,1000,1001,1004],{},[21,1002,1003],{},"server_name _;",": Chỉ thị này cho phép server chấp nhận tất cả các yêu cầu không khớp với server block khác. Nếu bạn có tên miền cụ thể, hãy thay thế dấu gạch dưới (_) bằng tên miền của bạn.",[18,1006,1007,1010],{},[21,1008,1009],{},"location /",": Đây là phần cấu hình định tuyến cho các yêu cầu đến. Cấu hình này giúp Nginx tìm kiếm các tệp tin khi người dùng truy cập vào website.",[18,1012,1013,1016],{},[21,1014,1015],{},"try_files $uri $uri/ =404;",": Nếu yêu cầu không trùng khớp với tệp tin hoặc thư mục, sẽ trả về lỗi 404.",[357,1018,1019],{},"Sau khi chỉnh sửa xong, bạn cần kiểm tra xem cấu hình có chính xác không:",[70,1021],{":files":1022},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"sudo nginx -t\"}]",[357,1024,1025],{},"Nếu không có lỗi nào, bạn có thể khởi động lại Nginx để áp dụng cấu hình mới:",[70,1027],{":files":1028},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"sudo systemctl restart nginx\"}]",[357,1030,1031],{},"Giới thiệu về sites-available và sites-enabled",[357,1033,1034],{},"Trong Nginx, thư mục sites-available và sites-enabled là một cơ chế để quản lý các website (virtual hosts) mà Nginx có thể phục vụ. Cấu trúc này giúp dễ dàng bật/tắt các website mà không cần phải xóa hoặc thay đổi cấu hình trực tiếp.",[598,1036,1037],{},[18,1038,1039,745],{},[21,1040,1041],{},"sites-available",[15,1043,1044,1047,1050],{},[18,1045,1046],{},"Đây là nơi bạn tạo và lưu trữ tất cả các file cấu hình của các website hoặc ứng dụng mà bạn muốn Nginx phục vụ.",[18,1048,1049],{},"Mỗi file cấu hình trong sites-available đại diện cho một website hoặc ứng dụng riêng biệt.",[18,1051,1052],{},"Ví dụ: /etc/nginx/sites-available/example.com là cấu hình cho website example.com.",[598,1054,1055],{"start":75},[18,1056,1057,745],{},[21,1058,1059],{},"sites-enabled",[15,1061,1062,1065,1068],{},[18,1063,1064],{},"Đây là nơi chứa các liên kết tượng trưng (symlink) đến các file cấu hình trong sites-available mà bạn muốn Nginx thực thi.",[18,1066,1067],{},"Các liên kết này cho phép Nginx biết được website nào sẽ được kích hoạt.",[18,1069,1070],{},"Bạn không nên trực tiếp chỉnh sửa các file trong sites-enabled. Thay vào đó, bạn tạo symlink từ sites-available.",[357,1072,1073],{},"Cách thức hoạt động:",[15,1075,1076,1079],{},[18,1077,1078],{},"Khi bạn tạo một file cấu hình trong sites-available, bạn có thể kích hoạt nó bằng cách tạo một symlink đến file đó trong thư mục sites-enabled.",[18,1080,1081,1082,517],{},"Để tạo symlink, sử dụng lệnh ",[21,1083,1084],{},"ln -s",[357,1086,1087],{},"Ví dụ, nếu bạn có cấu hình example.com trong sites-available, bạn có thể tạo symlink vào sites-enabled như sau:",[70,1089],{":files":1090},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\"}]",[10,1092,144],{"id":1093},"cấu-hình-nginx-với-php-fpm",[357,1095,1096],{},"Để xử lý các file PHP, bạn cần kết nối Nginx với PHP-FPM qua socket hoặc TCP:",[70,1098],{":files":1099},"[{\"title\":\"php-fpm.conf\",\"language\":\"nginx\",\"content\":\"location ~ \\\\.php$ {\\n  try_files $uri =404;\\n  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\\n  fastcgi_index index.php;\\n  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\\n  include fastcgi_params;\\n}\\n\"}]",[357,1101,1102],{},[424,1103,718],{},[15,1105,1106,1109],{},[18,1107,1108],{},"Đường dẫn socket có thể thay đổi tùy phiên bản PHP.",[18,1110,1111],{},"Nếu dùng TCP:",[70,1113],{":files":1114},"[{\"title\":\"php-fpm.conf\",\"language\":\"nginx\",\"content\":\"fastcgi_pass 127.0.0.1:9000;\"}]",[686,1116],{},[10,1118,149],{"id":1119},"load-balancer-trong-nginx",[357,1121,1122],{},"Nginx hỗ trợ cấu hình cân bằng tải với nhiều thuật toán lựa chọn backend:",[15,1124,1125,1131,1137,1143],{},[18,1126,1127,1130],{},[21,1128,1129],{},"round-robin",": Mặc định, phân phối đều cho các request.",[18,1132,1133,1136],{},[21,1134,1135],{},"least_conn",": Chọn server ít kết nối nhất.",[18,1138,1139,1142],{},[21,1140,1141],{},"ip_hash",": Duy trì session cho client.",[18,1144,1145,1148],{},[21,1146,1147],{},"least_time",": chọn server có thời gian phản hồi ít nhất",[357,1150,1151],{},"Có thể thêm trọng số cho server bằng cách thêm số sau ip:port",[15,1153,1154],{},[18,1155,1156],{},"Ex: server 192.168.1.0:8000 weight=3;",[70,1158],{":files":1159},"[{\"title\":\"upstream.conf\",\"language\":\"nginx\",\"content\":\"upstream myapp1 {\\n    ip_hash;\\n    server 192.168.1.10:8000;\\n    server 192.168.2.10:8000;\\n    # server 192.168.1.10:8000 weight=3;\\n}\\n\"}]",[357,1161,1162],{},"Cấu hình server block proxy đến upstream:",[70,1164],{":files":1165},"[{\"title\":\"proxy.conf\",\"language\":\"nginx\",\"content\":\"server {\\n  listen 80 default_server;\\n  server_name _;\\n  root /var/www/html;\\n  index index.html index.htm;\\n\\n  location / {\\n      proxy_pass http://myapp1;\\n      proxy_set_header Host $host;\\n      proxy_set_header X-Real-IP $remote_addr;\\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n      proxy_set_header X-Forwarded-Proto $scheme;\\n  }\\n}\\n\"}]",[686,1167],{},[10,1169,154],{"id":1170},"gzip-compression",[357,1172,156],{},[70,1174],{":files":1175},"[{\"title\":\"gzip.conf\",\"language\":\"nginx\",\"content\":\"gzip on;\\ngzip_disable \\\"msie6\\\";\\ngzip_vary on;\\ngzip_proxied any;\\ngzip_comp_level 6;\\ngzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\\n\"}]",[686,1177],{},[10,1179,159],{"id":1180},"kích-hoạt-http2",[357,1182,161],{},[70,1184],{":files":1185},"[{\"title\":\"http2.conf\",\"language\":\"nginx\",\"content\":\"listen 443 ssl http2;\\n\"}]",[686,1187],{},[10,1189,164],{"id":1190},"rate-limiting",[357,1192,166],{},[70,1194],{":files":1195},"[{\"title\":\"rate-limiting.conf\",\"language\":\"nginx\",\"content\":\"limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;\\n\\nlocation /api/ {\\n    limit_req zone=mylimit burst=5;\\n}\\n\"}]",[686,1197],{},[10,1199,169],{"id":1200},"redirect-và-rewrites",[357,1202,1203],{},"Chuyển hướng toàn bộ traffic HTTP sang HTTPS:",[70,1205],{":files":1206},"[{\"title\":\"redirect.conf\",\"language\":\"nginx\",\"content\":\"server {\\n    listen 80;\\n    server_name example.com;\\n    return 301 https://$host$request_uri;\\n}\\nserver {\\n    listen 443 ssl;\\n    server_name example.com;\\n    ssl_certificate /path/to/cert.pem;\\n    ssl_certificate_key /path/to/key.pem;\\n}\\n\"}]",[357,1208,1209],{},"Viết lại URL cho SPA:",[70,1211],{":files":1212},"[{\"title\":\"rewrite.conf\",\"language\":\"nginx\",\"content\":\"location /api/ {\\n    rewrite ^/api/(.*)$ /$1 break;\\n}\\n\"}]",[686,1214],{},[10,1216,174],{"id":1217},"hardening-security",[357,1219,1220],{},"Bảo vệ server bằng cách từ chối truy cập file nhạy cảm:",[70,1222],{":files":1223},"[{\"title\":\"deny.conf\",\"language\":\"nginx\",\"content\":\"location ~* \\\\\\\\.(git|env|bak|log)$ {\\n  deny all;\\n}\\n\"}]",[357,1225,1226],{},"Ẩn thông tin server:",[70,1228],{":files":1229},"[{\"title\":\"security.conf\",\"language\":\"nginx\",\"content\":\"server_tokens off;\\n\"}]",[357,1231,1232],{},"Chống clickjacking và XSS:",[70,1234],{":files":1235},"[{\"title\":\"headers.conf\",\"language\":\"nginx\",\"content\":\"add_header X-Content-Security-Policy \\\"default-src 'self'\\\";\\nadd_header X-Frame-Options \\\"DENY\\\";\\nadd_header X-XSS-Protection \\\"1; mode=block\\\";\\nadd_header Referrer-Policy \\\"no-referrer\\\";\\n\"}]",[686,1237],{},[10,1239,179],{"id":1240},"logging-nâng-cao",[357,1242,181],{},[70,1244],{":files":1245},"[{\"title\":\"logging.conf\",\"language\":\"nginx\",\"content\":\"log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" '\\n               '$status $body_bytes_sent \\\"$http_referer\\\" '\\n               '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"';\\naccess_log /var/log/nginx/access.log main;\\n\"}]",[686,1247],{},[10,1249,124],{"id":789},[15,1251,1252,1259,1266,1273],{},[18,1253,1254],{},[26,1255,1258],{"href":1256,"rel":1257},"https://nginx.org/en/docs/",[30],"Nginx Documentation",[18,1260,1261],{},[26,1262,1265],{"href":1263,"rel":1264},"https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/",[30],"Nginx Load Balancing Guide",[18,1267,1268],{},[26,1269,1272],{"href":1270,"rel":1271},"https://www.php.net/manual/en/install.fpm.configuration.php",[30],"Nginx + PHP-FPM Setup",[18,1274,1275],{},[26,1276,1279],{"href":1277,"rel":1278},"https://owasp.org/www-project-secure-headers/",[30],"OWASP Nginx Hardening Guide",[686,1281],{},[419,1283],{},[357,1285,1286],{},[424,1287,821],{},[357,1289,1290],{},"Nginx là công cụ cực kỳ mạnh mẽ và linh hoạt, không chỉ giới hạn ở web server mà còn là reverse proxy, caching layer, và load balancer. Việc nắm vững và khai thác tốt các tính năng sẽ giúp hệ thống của bạn hiệu suất cao, bảo mật và dễ mở rộng.",{"title":74,"searchDepth":75,"depth":75,"links":1292},[],"Hướng dẫn chi tiết về cấu hình mặc định, PHP-FPM và thiết lập Load Balancer với Nginx.","/images/blog/basic-nginx/banner.webp","nginx, cấu hình, load balancer, php-fpm",{},{"title":129,"description":1293},"blog/basic-nginx",[1300],"nginx","HD2m_BWB56LMZrpcr_Dma_Q9HlPP695j9xqke5zmgZ8",{"id":1303,"title":188,"body":1304,"date":827,"description":1483,"extension":79,"image":1484,"keywords":1485,"meta":1486,"navigation":83,"path":187,"published":83,"seo":1487,"stem":1488,"tags":1489,"__hash__":1491},"blog/blog/basic-redis.md",{"type":7,"value":1305,"toc":1469},[1306,1310,1313,1316,1327,1329,1332,1334,1338,1340,1343,1346,1348,1351,1354,1356,1359,1362,1364,1367,1370,1372,1375,1378,1381,1384,1387,1390,1393,1396,1399,1401,1404,1407,1409,1412,1415,1422,1425,1428,1430,1433,1436,1438,1441,1443,1446,1451,1454],[357,1307,1308],{},[424,1309,188],{},[357,1311,1312],{},"Redis là một kho dữ liệu key-value trong bộ nhớ, mã nguồn mở, nổi tiếng với hiệu suất và tính linh hoạt. Redis hỗ trợ nhiều kiểu dữ liệu, phù hợp cho việc sử dụng bộ nhớ đệm, ứng dụng thời gian thực, hệ thống pub/sub, và nhiều hơn nữa.",[357,1314,1315],{},"Trong hướng dẫn này, chúng ta sẽ tìm hiểu:",[15,1317,1318,1321,1324],{},[18,1319,1320],{},"Các kiểu dữ liệu trong Redis",[18,1322,1323],{},"Các lệnh phổ biến của Redis",[18,1325,1326],{},"Cách tích hợp Redis vào dự án Node.js",[686,1328],{},[10,1330,193],{"id":1331},"các-kiểu-dữ-liệu-lệnh-redis",[357,1333,195],{},[1335,1336,198],"h2",{"id":1337},"_1-chuỗi-strings",[357,1339,200],{},[70,1341],{":files":1342},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"SET name \\\"Jay\\\"\\nGET name\\nINCR counter\\n\"}]",[1335,1344,203],{"id":1345},"_2-danh-sách-lists",[357,1347,205],{},[70,1349],{":files":1350},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"LPUSH mylist \\\"apple\\\"\\nRPUSH mylist \\\"banana\\\"\\nLRANGE mylist 0 -1\\n\"}]",[1335,1352,208],{"id":1353},"_3-tập-hợp-sets",[357,1355,210],{},[70,1357],{":files":1358},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"SADD myset \\\"apple\\\"\\nSADD myset \\\"banana\\\"\\nSADD myset \\\"apple\\\" # Trùng lặp, sẽ không được thêm\\nSMEMBERS myset\\n\"}]",[1335,1360,213],{"id":1361},"_4-băm-hashes",[357,1363,215],{},[70,1365],{":files":1366},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"HSET user:1000 name \\\"Jay\\\" age 30\\nHGETALL user:1000\\n\"}]",[1335,1368,218],{"id":1369},"_5-tập-hợp-có-thứ-tự-sorted-sets",[357,1371,220],{},[70,1373],{":files":1374},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"ZADD mysortedset 1 \\\"apple\\\"\\nZADD mysortedset 2 \\\"banana\\\"\\nZRANGE mysortedset 0 -1\\n\"}]",[1335,1376,223],{"id":1377},"_6-bitmaps-hyperloglogs-streams",[357,1379,1380],{},"Đây là các cấu trúc nâng cao hơn:\nBitmaps được sử dụng cho các thao tác cấp bit, cho phép bạn thao tác các bit riêng lẻ trong một chuỗi.",[70,1382],{":files":1383},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"SETBIT mybitmap 0 1\\nSETBIT mybitmap 1 1\\nBITCOUNT mybitmap\\n\"}]",[357,1385,1386],{},"HyperLogLogs được sử dụng để ước tính số lượng phần tử duy nhất trong một tập hợp, rất hữu ích cho các trường hợp như theo dõi số lượng khách truy cập duy nhất.",[70,1388],{":files":1389},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"PFADD myhll \\\"apple\\\" \\\"banana\\\" \\\"orange\\\"\\nPFCOUNT myhll\\n\"}]",[357,1391,1392],{},"Streams được thiết kế cho các đường dẫn dữ liệu thời gian thực và nguồn sự kiện, cho phép bạn thêm và truy vấn dữ liệu theo chuỗi thời gian.",[70,1394],{":files":1395},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"XADD mystream * name \\\"Jay\\\" age 30\\nXRANGE mystream - +\\n\"}]",[10,1397,228],{"id":1398},"tích-hợp-redis-với-nodejs",[357,1400,230],{},[1335,1402,233],{"id":1403},"_1-cài-đặt-redis-và-ioredis",[70,1405],{":files":1406},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"npm install ioredis\\n# hoặc\\nyarn add ioredis\\n\"}]",[357,1408,235],{},[70,1410],{":files":1411},"[{\"title\":\"bash\",\"language\":\"bash\",\"content\":\"docker run -d -p 6379:6379 redis\\n\"}]",[1335,1413,238],{"id":1414},"_2-thiết-lập-cơ-bản",[357,1416,1417,1418,1421],{},"Tạo một tệp có tên ",[21,1419,1420],{},"redis.js"," và thêm đoạn mã sau:",[70,1423],{":files":1424},"[{\"title\":\"redis.js\",\"language\":\"javascript\",\"content\":\"// redis.ts\\nimport Redis from 'ioredis';\\n\\nconst redis = new Redis({\\n  host: '127.0.0.1',\\n  port: 6379,\\n  // password: 'mật_khẩu_nếu_có'\\n});\\n\\nexport default redis;\\n\"}]",[1335,1426,243],{"id":1427},"_3-sử-dụng-redis-trong-ứng-dụng",[357,1429,245],{},[70,1431],{":files":1432},"[{\"title\":\"example.js\",\"language\":\"javascript\",\"content\":\"// example.ts\\nimport redis from './redis';\\n\\n// Chuỗi\\nawait redis.set('greeting', 'Hello Redis');\\nconst greeting = await redis.get('greeting');\\nconsole.log(greeting); // Hello Redis\\n\\n// Danh sách\\nawait redis.lpush('queue', 'task1');\\nconst task = await redis.rpop('queue');\\nconsole.log(task); // task1\\n\\n// Băm\\nawait redis.hset('user:1', { name: 'Jay', role: 'admin' });\\nconst user = await redis.hgetall('user:1');\\nconsole.log(user); // { name: 'Jay', role: 'admin' }\\n\\n// Tập hợp có thứ tự\\nawait redis.zadd('scores', 100, 'Jay');\\nconst scores = await redis.zrange('scores', 0, -1, 'WITHSCORES');\\nconsole.log(scores);\\n\\n// Pub/Sub\\nredis.subscribe('news');\\nredis.on('message', (channel, message) => {\\n  console.log(`Nhận tin nhắn từ ${channel}: ${message}`);\\n});\\n\\nconst publisher = new Redis();\\npublisher.publish('news', 'Tin nóng!');\\n\"}]",[1335,1434,248],{"id":1435},"_4-ví-dụ-về-bộ-nhớ-đệm",[357,1437,250],{},[70,1439],{":files":1440},"[{\"title\":\"cache.js\",\"language\":\"javascript\",\"content\":\"import redis from './redis';\\n\\nasync function getUserData(userId) {\\n  const cacheKey = `user:${userId}`;\\n  const cachedData = await redis.get(cacheKey);\\n\\n  if (cachedData) {\\n    return JSON.parse(cachedData);\\n  }\\n\\n  // Mô phỏng truy vấn cơ sở dữ liệu\\n  const userData = await queryDatabase(userId);\\n  await redis.set(cacheKey, JSON.stringify(userData), 'EX', 3600); // Lưu vào bộ nhớ đệm trong 1 giờ\\n  return userData;\\n}\\n\\nasync function queryDatabase(userId) {\\n  // Mô phỏng truy vấn cơ sở dữ liệu\\n  return { id: userId, name: 'Jay', age: 30 };\\n}\\n\"}]",[1335,1442,253],{"id":628},[357,1444,1445],{},"Redis là một công cụ mạnh mẽ cho bộ nhớ đệm và các ứng dụng thời gian thực. Bằng cách tích hợp Redis vào các dự án Node.js, bạn có thể cải thiện đáng kể hiệu suất và khả năng mở rộng. Hướng dẫn này đã bao quát các khái niệm cơ bản về kiểu dữ liệu, lệnh, và cách sử dụng Redis trong ứng dụng Node.js.\nHãy khám phá thêm các tính năng nâng cao như giao dịch, scripting Lua, và clustering khi bạn đã quen thuộc hơn với Redis.\nRedis là một công cụ đa năng có thể nâng cao đáng kể ứng dụng của bạn.",[357,1447,1448],{},[424,1449,1450],{},"Happy Coding",[1335,1452,258],{"id":1453},"_6-tài-nguyên-tham-khảo",[15,1455,1456,1463],{},[18,1457,1458],{},[26,1459,1462],{"href":1460,"target":1461},"https://redis.io/documentation","_blank","Tài liệu Redis",[18,1464,1465],{},[26,1466,1468],{"href":1467,"target":1461},"https://github.com/redis/ioredis","Tài liệu ioredis",{"title":74,"searchDepth":75,"depth":75,"links":1470},[1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482],{"id":1337,"depth":75,"text":198},{"id":1345,"depth":75,"text":203},{"id":1353,"depth":75,"text":208},{"id":1361,"depth":75,"text":213},{"id":1369,"depth":75,"text":218},{"id":1377,"depth":75,"text":223},{"id":1403,"depth":75,"text":233},{"id":1414,"depth":75,"text":238},{"id":1427,"depth":75,"text":243},{"id":1435,"depth":75,"text":248},{"id":628,"depth":75,"text":253},{"id":1453,"depth":75,"text":258},"Tìm hiểu các khái niệm cơ bản về Redis bao gồm các kiểu dữ liệu và phương thức, cũng như cách tích hợp Redis vào ứng dụng Node.js để sử dụng bộ nhớ đệm và các tính năng thời gian thực.","/images/blog/basic-redis/banner.webp","redis, nodejs, cache, in-memory database",{},{"title":188,"description":1483},"blog/basic-redis",[1490],"redis","3d0XvNroUY6-txkS2aldMngWhf075Own2Hqsb5sjDmM",{"id":1493,"title":263,"body":1494,"date":827,"description":1577,"extension":79,"image":1578,"keywords":1579,"meta":1580,"navigation":83,"path":262,"published":83,"seo":1581,"stem":1582,"tags":1583,"__hash__":1585},"blog/blog/common-docker-file.md",{"type":7,"value":1495,"toc":1568},[1496,1500,1503,1508,1510,1513,1515,1518,1521,1523,1526,1529,1531,1534,1537,1539,1542,1545,1547,1550,1553,1555,1557,1560],[357,1497,1498],{},[424,1499,263],{},[357,1501,1502],{},"Docker là một công cụ ảo hóa nhẹ giúp phát triển, triển khai và chạy ứng dụng trong các container. Nó cho phép bạn đóng gói ứng dụng và tất cả các phụ thuộc của nó vào một container duy nhất, giúp dễ dàng triển khai trên bất kỳ môi trường nào mà không cần lo lắng về sự khác biệt giữa các môi trường.",[389,1504,1505],{"type":391},[357,1506,1507],{},"Đây là một số Dockerfile cho các dự án thường gặp, bạn có thể tham khảo và điều chỉnh theo nhu cầu của mình.",[419,1509],{},[1335,1511,268],{"id":1512},"_1-dockerfile-cho-nodejs",[357,1514,270],{},[70,1516],{":files":1517},"[{\"title\":\"Dockerfile\",\"language\":\"dockerfile\",\"content\":\"FROM node:18-slim\\nWORKDIR /app\\nCOPY package*.json ./\\nRUN npm install --production\\nCOPY . .\\nEXPOSE 3000\\nCMD [\\\"node\\\", \\\"index.js\\\"]\\n\"}]",[1335,1519,273],{"id":1520},"_2-dockerfile-cho-php-với-laravel",[357,1522,275],{},[70,1524],{":files":1525},"[{\"title\":\"Dockerfile\",\"language\":\"dockerfile\",\"content\":\"FROM php:8.1-fpm-alpine\\nRUN apk add --no-cache libpng libjpeg-turbo libfreetype && \\\\\\n    docker-php-ext-configure gd --with-freetype --with-jpeg && \\\\\\n    docker-php-ext-install gd pdo pdo_mysql\\nWORKDIR /var/www\\nCOPY . .\\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\\nRUN composer install --optimize-autoloader --no-dev\\nEXPOSE 9000\\nCMD [\\\"php-fpm\\\"]\\n\"}]",[1335,1527,278],{"id":1528},"_3-dockerfile-cho-react",[357,1530,280],{},[70,1532],{":files":1533},"[{\"title\":\"Dockerfile\",\"language\":\"dockerfile\",\"content\":\"FROM node:18-slim as build\\nWORKDIR /app\\nCOPY . .\\nRUN npm install\\nRUN npm run build\\n\\nFROM nginx:alpine\\nCOPY --from=build /app/build /usr/share/nginx/html\\nEXPOSE 80\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\\n\"}]",[1335,1535,283],{"id":1536},"_4-dockerfile-cho-vue",[357,1538,285],{},[70,1540],{":files":1541},"[{\"title\":\"Dockerfile\",\"language\":\"dockerfile\",\"content\":\"FROM node:18-slim as build\\nWORKDIR /app\\nCOPY . .\\nRUN npm install\\nRUN npm run build\\n\\nFROM nginx:alpine\\nCOPY --from=build /app/dist /usr/share/nginx/html\\nEXPOSE 80\\nCMD [\\\"nginx\\\", \\\"-g\\\", \\\"daemon off;\\\"]\\n\"}]",[1335,1543,288],{"id":1544},"_5-dockerfile-cho-nuxtjs",[357,1546,290],{},[70,1548],{":files":1549},"[{\"title\":\"Dockerfile\",\"language\":\"dockerfile\",\"content\":\"FROM node:18-slim as build\\nWORKDIR /app\\nCOPY . .\\nRUN npm install\\nRUN npm run build\\n\\nFROM node:18-slim\\nWORKDIR /app\\nCOPY --from=build /app /app\\nEXPOSE 3000\\nCMD [\\\"npm\\\", \\\"run\\\", \\\"start\\\"]\\n\"}]",[1335,1551,293],{"id":1552},"_6-dockerfile-cho-nextjs",[357,1554,295],{},[70,1556],{":files":1549},[1335,1558,298],{"id":1559},"đang-cập-nhật",[357,1561,1562,1563,1567],{},"Nếu bạn có các cấu hình hoặc Dockerfile khác muốn chia sẻ, vui lòng gửi email về ",[26,1564,1566],{"href":1565},"mailto:vinhtieng123@gmail.com","vinhtieng123@gmail.com",". Mình rất trân trọng điều đó.",{"title":74,"searchDepth":75,"depth":75,"links":1569},[1570,1571,1572,1573,1574,1575,1576],{"id":1512,"depth":75,"text":268},{"id":1520,"depth":75,"text":273},{"id":1528,"depth":75,"text":278},{"id":1536,"depth":75,"text":283},{"id":1544,"depth":75,"text":288},{"id":1552,"depth":75,"text":293},{"id":1559,"depth":75,"text":298},"Tìm hiểu về Docker và khám phá các Dockerfile phổ biến cho nhiều dự án như Node.js, PHP với Laravel, React, Vue, Nuxt và Next.js. Khám phá các kỹ thuật tối ưu và thực hành tốt nhất.","/images/blog/common-docker-file/banner.webp","docker, dockerfile, file docker mẫu, dockerfile cho nodejs, dockerfile cho php, dockerfile cho react, dockerfile cho vue, dockerfile cho nuxt, dockerfile cho next",{},{"title":263,"description":1577},"blog/common-docker-file",[1584],"docker","yW0aat1lQXPakGsnwH5hxFUsvkeZxDkTUxf4jPbfiT4",{"id":350,"title":303,"body":1587,"date":77,"description":305,"extension":79,"image":665,"keywords":666,"meta":1798,"navigation":83,"path":302,"published":83,"seo":1799,"stem":669,"tags":1800,"__hash__":671},{"type":7,"value":1588,"toc":1796},[1589,1591,1593,1600,1602,1610,1614,1616,1630,1632,1636,1642,1644,1646,1652,1662,1664,1666,1678,1680,1684,1686,1688,1690,1692,1702,1704,1706,1714,1720,1722,1724,1736,1740,1745,1747,1749,1763,1765,1767,1769,1771,1775,1777,1779],[10,1590,308],{"id":355},[357,1592,359],{},[357,1594,1595],{},[363,1596,365,1597],{},[26,1598,368],{"href":368,"rel":1599},[30],[10,1601,313],{"id":372},[357,1603,375,1604,379,1606,383,1608,387],{},[21,1605,378],{},[21,1607,382],{},[21,1609,386],{},[389,1611,1612],{"type":391},[357,1613,394],{},[357,1615,397],{},[15,1617,1618,1622,1626],{},[18,1619,402,1620],{},[21,1621,405],{},[18,1623,408,1624],{},[21,1625,411],{},[18,1627,414,1628],{},[21,1629,417],{},[419,1631],{},[357,1633,1634],{},[424,1635,426],{},[15,1637,1638],{},[18,1639,1640,433],{},[424,1641,378],{},[357,1643,436],{},[70,1645],{":files":439},[15,1647,1648],{},[18,1649,1650,446],{},[424,1651,382],{},[389,1653,1654],{"type":391},[357,1655,451,1656,379,1658,379,1660,461],{},[21,1657,454],{},[21,1659,457],{},[21,1661,460],{},[357,1663,464],{},[70,1665],{":files":467},[15,1667,1668],{},[18,1669,1670,474,1672,383,1674,479,1676],{},[424,1671,386],{},[21,1673,378],{},[21,1675,382],{},[70,1677],{":files":482},[10,1679,318],{"id":485},[357,1681,488,1682,492],{},[21,1683,491],{},[357,1685,495],{},[70,1687],{":files":498},[357,1689,501],{},[70,1691],{":files":504},[357,1693,507,1694,383,1696,512,1698,383,1700,517],{},[21,1695,378],{},[21,1697,382],{},[21,1699,378],{},[21,1701,382],{},[357,1703,520],{},[70,1705],{":files":523},[357,1707,526,1708,530,1710,534,1712,538],{},[21,1709,529],{},[21,1711,533],{},[21,1713,537],{},[357,1715,541,1716,545,1718,549],{},[21,1717,544],{},[21,1719,548],{},[357,1721,552],{},[70,1723],{":files":555},[357,1725,558,1726,562,1728,383,1730,569,1732,572,1734,575],{},[21,1727,561],{},[21,1729,565],{},[21,1731,568],{},[21,1733,565],{},[21,1735,568],{},[389,1737,1738],{"type":578},[357,1739,581],{},[357,1741,584,1742,590],{},[26,1743,589],{"href":587,"rel":1744},[30],[10,1746,323],{"id":593},[357,1748,596],{},[598,1750,1751,1753,1755],{},[18,1752,602],{},[18,1754,605],{},[18,1756,608,1757],{},[15,1758,1759,1761],{},[18,1760,613],{},[18,1762,616],{},[70,1764],{":files":619},[357,1766,622],{},[70,1768],{":files":625},[10,1770,328],{"id":628},[357,1772,631,1773,634],{},[21,1774,491],{},[357,1776,637],{},[10,1778,333],{"id":640},[15,1780,1781,1786,1791],{},[18,1782,1783],{},[26,1784,649],{"href":647,"rel":1785},[30],[18,1787,1788],{},[26,1789,656],{"href":654,"rel":1790},[30],[18,1792,1793],{},[26,1794,491],{"href":661,"rel":1795},[30],{"title":74,"searchDepth":75,"depth":75,"links":1797},[],{},{"title":303,"description":305},[88],{"id":4,"title":5,"body":1802,"date":77,"description":78,"extension":79,"image":80,"keywords":81,"meta":1843,"navigation":83,"path":84,"published":83,"seo":1844,"stem":86,"tags":1845,"__hash__":89},{"type":7,"value":1803,"toc":1841},[1804,1806,1827,1829,1833,1835],[10,1805,13],{"id":12},[15,1807,1808,1815,1819,1823],{},[18,1809,1810,24,1812,32],{},[21,1811,23],{},[26,1813,31],{"href":28,"rel":1814},[30],[18,1816,1817,38],{},[21,1818,37],{},[18,1820,1821,44],{},[21,1822,43],{},[18,1824,1825,50],{},[21,1826,49],{},[10,1828,54],{"id":53},[15,1830,1831],{},[18,1832,59],{},[10,1834,63],{"id":62},[15,1836,1837],{},[18,1838,68,1839],{},[70,1840],{":files":72},{"title":74,"searchDepth":75,"depth":75,"links":1842},[],{},{"title":5,"description":78},[88],1746498794924]